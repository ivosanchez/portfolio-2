{
  "name": "DjangoEats",
  "href": "https://djangoeats.netlify.app/",
  "summary": {
    "techs": ["React", "Rest Framework"],
    "desc": {
      "ko": "UberEats의 풀스택 클론 코딩이에요. 레스토랑, 배달원, 소비자 3가지 역할로 가입 할 수 있고, Django-channels를 통해 주문의 상황이 실시간으로 업데이트돼요.",
      "en": "Fullstack cloning UberEats with 3 roles(Restaurant owner, Delivery, and Customer) and real-time order through Django channels."
    },
    "videoSrc": "djangoeats/video.mp4",
    "posterUrl": "djangoeats/screenshot.png"
  },
  "detail": {
    "heroImgUrl": "djangoeats/screenshot.png",
    "overviews": [
      {
        "heading": {
          "ko": "NestJS에서 Rest Framework로",
          "en": "From NestJS to Rest Framework"
        },
        "paragraphs": [
          {
            "ko": "원래 <a class='v-html__anchor-white' href='https://www.ubereats.com/' target='_blank'>UberEats</a> 클론은 수업에서 진행한 것이에요. React와 NestJS를 사용했었죠. 저는 이걸 Rest Framework로 대체한다면 무엇이 다를지, 개발 경험에 어떤 차이가 있을지 궁금했어요.",
            "en": "UberEats clone was originally done in NestJS class. It was built with React and NestJs. But I was curious what if I change the backend to Rest Framework from NestJS, what is going to be changed, how developing experience will be different."
          }
        ]
      },
      {
        "heading": {
          "ko": "제대로 프로젝트를 경험하기 위해서는...",
          "en": "For a full experience of this project..."
        },
        "paragraphs": [
          {
            "ko": "레스토랑, 배달원, 소비자 3가지 계정을 만들어서 로그인된 상태여야 해요. 각기 다른 브라우저로 로그인하거나 시크릿 모드를 활용해 주세요.",
            "en": "You need to create 3 accounts and log in. Restaurant owner, delivery, and customer. Please use different web browsers for each account. Or you can use incognito mode."
          }
        ]
      }
    ],
    "frontendTechs": [
      "Typescript",
      "React",
      "Redux",
      "React-Hook-Form",
      "Chakra UI"
    ],
    "backendTechs": [
      "Python",
      "Rest-Framework",
      "Django",
      "Django-Channels",
      "PostgreSQL",
      "Redis"
    ],
    "frontendGithubUrl": "https://github.com/jonganebski/django-eats-frontend",
    "backendGithubUrl": "https://github.com/jonganebski/django-eats-backend",
    "descs": [
      {
        "heading": { "ko": "힘들었던 점", "en": "Obstacles" },
        "paragraphs": [
          {
            "ko": "메뉴는 PostgreSQL에 JSON 필드에 저장되는데, 메뉴의 크기가 커지고 깊어지면서 Form 작성과 검증이 큰 난관이었어요. Form 작성에서는 React Hook Form으로 다이나믹한 Form을 만들 수 있었어요. 백엔드에서는 Cerberus로 JSON필드의 형태에 대해 검증을 하도록 했어요.",
            "en": "The menu was JSON field of PostgreSQL. Creating and validating the menu form became very complicated. React Hook Form library helped me to create a dynamic form. And on the backend, I used Cerberus library to validate JSON menu data before saving it."
          },
          {
            "ko": "처음에는 Django-seed를 사용해서 기본 레스토랑 데이터들을 만들 계획이었어요. 하지만 Django-seed가 아직 PostgreSQL의 JSON field를 인식하지 못한다는 걸 뒤늦게 알게 됐어요. 이 부분은 어쩔 도리가 없었어요. 두 레스토랑과 메뉴의 데이터를 하드코딩해서 JSON파일로 만들어야 했어요. 지루한 작업이었지만 이제 load 명령어로 언제든지 레스토랑과 메뉴를 생성할 수 있어요.",
            "en": "I was going to seed default restaurants using Django-seed library. But I came to know that Django-seed doesn't support JSON field yet. I couldn't help with it. I hard-coded two restaurants' data and their menu into JSON files. It was a boring job, but the default restaurants and the menu can be created with 'load' anytime."
          }
        ]
      },
      {
        "heading": { "ko": "이루지 못한 것", "en": "Failures" },
        "paragraphs": [
          {
            "ko": "AWS EC2로 배포하려고 했는데, 실시간 통신을 맡은 Django Channels가 문제였어요. 일반적인 Django배포에서 몇 가지 바뀌는 점이 있었는데 이 부분에서 시행착오를 겪었어요. 그런데 원인을 알 수 없는 S3 Storage 과금으로 중단할 수밖에 없었어요. 처음에는 공격이라도 받는 줄 알았어요. 현재 배포는 Heroku에 되어 있지만, 좀 더 경험이 쌓이면 재도전할 계획이에요.",
            "en": "Django Channels was a problem when I tried to deploy on AWS EC2. I had to change some settings from ordinary Django app deployment, and I was struggling. But somehow Amazon S3 storage requests were rising rapidly and made me pay more and more. I thought I was under some kind of attack. So I had to deploy on Heroku but I will try again after I get better at this."
          }
        ]
      },
      {
        "heading": {
          "ko": "한계와 앞으로의 계획",
          "en": "Limitations and future plan"
        },
        "paragraphs": [
          {
            "ko": "UI/UX 디자인을 고쳐야 해요. 특히 레스토랑 계정의 페이지들은 제가 가입해서 확인하지 못했기 때문에 클로닝이 아닌, 제가 직접 디자인한 페이지들이에요. 저는 디자이너는 아니라서 이 부분에서 미숙함이 묻어 나온 것 같아요. 그리고 메뉴 작성 Form이 복잡해지면서 그게 그대로 표출된 것 같아요. 그래서 일차적인 목표는 이걸 보완하는 게 되겠네요.",
            "en": "UI/UX design on Restaurant owner's pages needs improvements. I designed them by myself because I was not able to check how it looks like on UberEats. As I'm not a designer, I could not manage well with the design when I was focusing on functionalities of the pages and complicated forms. So this needs to be fixed."
          },
          {
            "ko": "그리고 방문하시는 분들이 실제로 메뉴를 만들기에는 분명 한계가 있으리라 생각해요. 사이즈에서부터 옵션, 가격까지 고려해야 할 게 많아요. 그래서 Faker를 사용해서 랜덤한 메뉴를 자동으로 만들어주는 기능을 추가할 계획이에요.",
            "en": "And I think visitors of DjangoEats will struggle with making real menus by themselves. I don't want you to create a whole menu with options and sizes, etc. So I'm planning to add auto-menu-generator with the Faker library."
          },
          {
            "ko": "마지막으로 Redux에 대한 부분이에요. Redux가 많이 사용되고 있다는 것은 알고 있지만, 뭔가 복잡하고 제 프로젝트 규모에 비해 거대하다는 느낌이에요. 요즘 React Query와 Zustand를 접하게 됐는데, 이쪽으로 바꿔보면 어떤 변화가 있을지 궁금해요.",
            "en": "Lastly, about Redux. I know many companies are using it and I should learn. However, it feels like Redux is too much for DjangoEats. I want to try React Query and Zustand as an alternative and see what's happening."
          }
        ]
      }
    ]
  }
}
